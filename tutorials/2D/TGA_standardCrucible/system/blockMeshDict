/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile {
  version     2.0;
  format      ascii;
  class       dictionary;
  object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Creating a 2D axi mesh for a standard Toledo aluminium crucible, filled with a porous material

convertToMeters 0.001; // convert millimeters in meters

// Geometry properties
// We use 4 blocks, 8 points
r1 3;
h1 0;
r2 3;
h2 1;
r3 0;
h3 1;
r4 4;
h4 0;
r5 4;
h5 1;
r6 0;
h6 2.6;
r7 3;
h7 2.6;
r8 4;
h8 2.6;


alphaDeg 	2.5; // half angle of the wedge in degrees
alpha    	#calc "degToRad($alphaDeg)";
r1s             #calc "$r1*sin($alpha)";
r1sn		#calc "-1.0*$r1s";
r1c             #calc "$r1*cos($alpha)";
r2s             #calc "$r2*sin($alpha)";
r2sn		#calc "-1.0*$r2s";
r2c             #calc "$r2*cos($alpha)";
r3s             #calc "$r3*sin($alpha)";
r3sn		#calc "-1.0*$r3s";
r3c             #calc "$r3*cos($alpha)";
r4s             #calc "$r4*sin($alpha)";
r4sn		#calc "-1.0*$r4s";
r4c             #calc "$r4*cos($alpha)";
r5s             #calc "$r5*sin($alpha)";
r5sn		#calc "-1.0*$r5s";
r5c             #calc "$r5*cos($alpha)";
r6s             #calc "$r6*sin($alpha)";
r6sn		#calc "-1.0*$r6s";
r6c             #calc "$r6*cos($alpha)";
r7s             #calc "$r7*sin($alpha)";
r7sn		#calc "-1.0*$r7s";
r7c             #calc "$r7*cos($alpha)";
r8s             #calc "$r8*sin($alpha)";
r8sn		#calc "-1.0*$r8s";
r8c             #calc "$r8*cos($alpha)";

vertices
(
    (0 0 0)          // 0
    ($r1c $h1 $r1sn) // 1
    ($r2c $h2 $r2sn) // 2
    ($r3c $h3 $r3sn) // 3
    ($r4c $h4 $r4sn) // 4
    ($r5c $h5 $r5sn) // 5
    ($r6c $h6 $r6sn) // 6
    ($r7c $h7 $r7sn) // 7
    ($r8c $h8 $r8sn) // 8
    (0 0 0) // 9 - not used, included so that we can start counting from 10 for second wedge.

    (0 0 0)          // 10
    ($r1c $h1 $r1s)  // 11
    ($r2c $h2 $r2s)  // 12
    ($r3c $h3 $r3s)  // 13
    ($r4c $h4 $r4s)  // 14
    ($r5c $h5 $r5s)  // 15
    ($r6c $h6 $r6s)  // 16
    ($r7c $h7 $r7s)  // 17
    ($r8c $h8 $r8s)  // 18

);

blocks
(
    hex (0 1 2 3 0 11 12 3) subMat1 (20 10 1) simpleGrading (1 1 1) // block 0, collapsed 10->0, 13->3
    hex (1 4 5 2 11 14 15 12) subMat1 (10 10 1) simpleGrading (1 1 1) // block 1
    hex (3 2 7 6 3 12 17 6) porousMat (20 20 1) simpleGrading (1 1 1) // block 2, collapsed 13->3, 16->6
    hex (2 5 8 7 12 15 18 17) subMat1 (10 20 1) simpleGrading (1 1 1) // block 3
);

edges
(
);

patches
(
    wall top
    (
        (7 6 6 17)
        (7 17 18 8)
        (8 18 15 5)
        (4 5 15 14)
        (0 1 11 0)
        (1 4 14 11)
    )

    wedge wedge_neg
    (
        (0 3 2 1)
        (1 2 5 4)
        (2 3 6 7)
        (5 2 7 8)
    )

    wedge wedge_pos
    (
        (0 11 12 3)
        (11 14 15 12)
        (3 12 17 6)
        (12 15 18 17)
    )

    empty axis
    (
        (0 0 3 3)
        (3 3 6 6)
    )

);

mergePatchPairs
(
);

// ************************************************************************* //
